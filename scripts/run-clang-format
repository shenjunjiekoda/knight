#!/usr/bin/python3

# ===- run-clang-format ------------------------------------------------===#
#
# Copyright (c) 2024 Junjie Shen
#
# see https://github.com/shenjunjiekoda/knight/blob/main/LICENSE for
# license information.
#
# ===------------------------------------------------------------------===#
#
#  This script runs clang-format on the whole repository.
#
# ===------------------------------------------------------------------===#


import argparse
import os
import re
import subprocess
import sys
from pathlib import Path

# Constants
CLANG_FORMAT_VERSION = "16.0.6"
SOURCE_EXTENSIONS = (".c", ".cpp", ".h", ".hpp", ".tpp")
IGNORE_DIRECTORIES = {".git", "build"}

RESET_COLOR = "\033[0m"
GREEN = "\033[32m"
RED = "\033[31m"
CYAN = "\033[36m"


def print_progress_bar(total, completed):
    """Print the progress bar with color, ensure to overwrite the whole line."""
    percent = (completed / total) * 100
    bar_length = 40
    filled_length = int(bar_length * completed // total)
    bar = (
        GREEN
        + "â–ˆ" * filled_length
        + RED
        + "-" * (bar_length - filled_length)
        + RESET_COLOR
    )
    # Ensure the line is long enough to overwrite the old content
    line = f"\r{CYAN}Progress: |{bar}| {percent:.1f}% Complete ({completed}/{total}){RESET_COLOR}"
    line += " " * (80 - len(line))  # Pad with spaces to cover old content if any
    sys.stdout.write(line)
    sys.stdout.flush()


def find_clang_format(executable):
    """Find the clang-format executable in the PATH."""
    path = Path(executable)
    if path.is_file() and os.access(path, os.X_OK):
        return path
    for dir in map(Path, os.environ["PATH"].split(os.pathsep)):
        full_path = dir / executable
        if full_path.is_file() and os.access(full_path, os.X_OK):
            return full_path
    return None


def check_clang_format_version(clang_format):
    """Check the clang-format version."""
    try:
        output = subprocess.check_output([str(clang_format), "--version"], text=True)
        match = re.match(r"clang-format version ([0-9\.]+)", output)
        if not match:
            raise ValueError("unexpected output from clang-format --version")
        if match.group(1) != CLANG_FORMAT_VERSION:
            print(
                f"Warning: Expected clang-format version {CLANG_FORMAT_VERSION}, but found {match.group(1)}",
                file=sys.stderr,
            )
    except subprocess.CalledProcessError as e:
        raise RuntimeError(f"Failed to execute '{clang_format}': {e}") from e


def format_source_files(src_dir, clang_format):
    """Format source files using clang-format and update the progress bar."""
    files_to_format = []
    for root, dirs, files in os.walk(src_dir):
        dirs[:] = [d for d in dirs if d not in IGNORE_DIRECTORIES]
        for file in files:
            file_path = Path(root) / file
            if file_path.suffix in SOURCE_EXTENSIONS:
                files_to_format.append(file_path)

    total_files = len(files_to_format)
    completed_files = 0
    print_progress_bar(total_files, completed_files)

    for file_path in files_to_format:
        subprocess.run(
            [str(clang_format), "-i", "-style=file", str(file_path)], check=True
        )
        completed_files += 1
        print_progress_bar(total_files, completed_files)
    print(f"\nAll {total_files} files formatted.")


def main():
    parser = argparse.ArgumentParser(
        description="Run clang-format on the whole repository"
    )
    parser.add_argument(
        "--srcdir",
        type=Path,
        default=Path(__file__).resolve().parent.parent,
        help="Path to the source directory",
    )
    parser.add_argument(
        "--clang-format", default="clang-format", help="Path to the clang-format binary"
    )
    parser.add_argument(
        "--check-version",
        default=False,
        action="store_true",
        help="Check the clang-format version",
    )
    args = parser.parse_args()

    if not args.srcdir.is_dir():
        print(f"Error: '{args.srcdir}' is not a directory", file=sys.stderr)
        sys.exit(1)

    clang_format = find_clang_format(args.clang_format)
    if not clang_format:
        print(f"Error: '{args.clang_format}' not found in PATH", file=sys.stderr)
        sys.exit(1)

    if args.check_version:
        check_clang_format_version(clang_format)

    format_source_files(args.srcdir, clang_format)


if __name__ == "__main__":
    main()
